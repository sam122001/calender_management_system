{"ast":null,"code":"var _jsxFileName = \"/home/samyukthap/Documents/Interview/calendar-app/src/components/Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { cloneElement, useEffect, useState } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport { useNavigate } from \"react-router-dom\";\nimport EventModal from \"./EventModal\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nconst MyCalendar = () => {\n  _s();\n  const [events, setEvents] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const navigate = useNavigate();\n  console.log(events, 'events');\n  useEffect(() => {\n    // Check authentication status when component mounts\n    const checkAuth = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/auth/status\", {\n          credentials: \"include\"\n        });\n        const data = await response.json();\n        if (!data.authenticated) {\n          // If not authenticated, redirect to home page\n          navigate(\"/\");\n        }\n      } catch (error) {\n        console.error(\"Error checking auth status:\", error);\n        navigate(\"/\");\n      }\n    };\n    checkAuth();\n    fetchEvents();\n  }, [navigate]);\n  const fetchEvents = async () => {\n    const response = await fetch(\"http://localhost:5000/get-events\", {\n      credentials: 'include'\n    });\n    const data = await response.json();\n    console.log(data, 'data');\n    if (response.ok) {\n      setEvents(data.map(event => ({\n        _id: event._id,\n        title: event.title,\n        description: event.description,\n        start: new Date(event.start).toISOString(),\n        // Ensuring proper date format\n        end: new Date(event.end).toISOString(),\n        participants: event.participants || [],\n        // Default empty array if no participants\n        sessionNotes: event.sessionNotes || \"\",\n        googleEventId: event.googleEventId || \"\",\n        createdAt: new Date(event.createdAt).toISOString(),\n        updatedAt: new Date(event.updatedAt).toISOString(),\n        __v: event.__v || 0\n      })));\n    }\n  };\n  const handleSelectSlot = ({\n    start\n  }) => {\n    setSelectedDate(start);\n    setIsModalOpen(true);\n  };\n  const handleEventSubmit = async eventData => {\n    try {\n      const response = await fetch(\"http://localhost:5000/add-event\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify(eventData)\n      });\n      if (response.ok) {\n        await fetchEvents(); // Refresh events after adding new one\n        setIsModalOpen(false);\n      } else {\n        alert(\"Failed to add event\");\n      }\n    } catch (error) {\n      console.error(\"Error adding event:\", error);\n      alert(\"Error adding event\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: events,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      style: {\n        height: 500\n      },\n      selectable: true,\n      onSelectSlot: handleSelectSlot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventModal, {\n      isOpen: isModalOpen,\n      onClose: () => setIsModalOpen(false),\n      onSubmit: handleEventSubmit,\n      selectedDate: selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(MyCalendar, \"69S/YuE6FypFg2VBKNtsq66X9GY=\", false, function () {\n  return [useNavigate];\n});\n_c = MyCalendar;\nexport default MyCalendar;\nvar _c;\n$RefreshReg$(_c, \"MyCalendar\");","map":{"version":3,"names":["React","cloneElement","useEffect","useState","Calendar","momentLocalizer","moment","useNavigate","EventModal","jsxDEV","_jsxDEV","localizer","MyCalendar","_s","events","setEvents","isModalOpen","setIsModalOpen","selectedDate","setSelectedDate","navigate","console","log","checkAuth","response","fetch","credentials","data","json","authenticated","error","fetchEvents","ok","map","event","_id","title","description","start","Date","toISOString","end","participants","sessionNotes","googleEventId","createdAt","updatedAt","__v","handleSelectSlot","handleEventSubmit","eventData","method","headers","body","JSON","stringify","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","startAccessor","endAccessor","style","height","selectable","onSelectSlot","isOpen","onClose","onSubmit","_c","$RefreshReg$"],"sources":["/home/samyukthap/Documents/Interview/calendar-app/src/components/Calendar.js"],"sourcesContent":["import React, { cloneElement, useEffect, useState } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport { useNavigate } from \"react-router-dom\";\nimport EventModal from \"./EventModal\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst localizer = momentLocalizer(moment);\n\nconst MyCalendar = () => {\n  const [events, setEvents] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const navigate = useNavigate();\n   console.log(events, 'events')\n  useEffect(() => {\n    // Check authentication status when component mounts\n    const checkAuth = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/auth/status\", {\n          credentials: \"include\",\n        });\n        const data = await response.json();\n        \n        if (!data.authenticated) {\n          // If not authenticated, redirect to home page\n          navigate(\"/\");\n        }\n      } catch (error) {\n        console.error(\"Error checking auth status:\", error);\n        navigate(\"/\");\n      }\n    };\n\n    checkAuth();\n\n    \n    fetchEvents();\n  }, [navigate]);\n  const fetchEvents = async () => {\n    const response = await fetch(\"http://localhost:5000/get-events\", {\n      credentials: 'include'\n    });\n    const data = await response.json();\n    console.log(data, 'data')\n    if (response.ok) {\n      setEvents(data.map(event => ({\n        _id: event._id,\n        title: event.title,\n        description: event.description,\n        start: new Date(event.start).toISOString(), // Ensuring proper date format\n        end: new Date(event.end).toISOString(),\n        participants: event.participants || [], // Default empty array if no participants\n        sessionNotes: event.sessionNotes || \"\",\n        googleEventId: event.googleEventId || \"\",\n        createdAt: new Date(event.createdAt).toISOString(),\n        updatedAt: new Date(event.updatedAt).toISOString(),\n        __v: event.__v || 0\n      })));\n    }\n    \n  };\n  const handleSelectSlot = ({ start }) => {\n    setSelectedDate(start);\n    setIsModalOpen(true);\n  };\n\n  const handleEventSubmit = async (eventData) => {\n    try {\n      const response = await fetch(\"http://localhost:5000/add-event\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(eventData),\n      });\n\n      if (response.ok) {\n        await fetchEvents(); // Refresh events after adding new one\n        setIsModalOpen(false);\n      } else {\n        alert(\"Failed to add event\");\n      }\n    } catch (error) {\n      console.error(\"Error adding event:\", error);\n      alert(\"Error adding event\");\n    }\n  };\n\n  return (\n    <div>\n      <h1>My Calendar</h1>\n      <Calendar \n        localizer={localizer} \n        events={events} \n        startAccessor=\"start\" \n        endAccessor=\"end\" \n        style={{ height: 500 }}\n        selectable={true}\n        onSelectSlot={handleSelectSlot}\n      />\n      <EventModal \n        isOpen={isModalOpen} \n        onClose={() => setIsModalOpen(false)} \n        onSubmit={handleEventSubmit}\n        selectedDate={selectedDate}\n      />\n    </div>\n  );\n};\n\nexport default MyCalendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}